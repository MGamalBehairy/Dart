switch-case is a simplified version of "if-else" 
it compares with "value"  not "Condition" like if-else
its simplified to  equal to " == "      ==>    is   expression qual to  value

* Syntax

switch (expression) {
  case value1:{
    // Body of Value1;
  } break;

  case value2: {
    // Body of value2;
  } break;

  default: {
    // Body of default case;
  } break;
}

// The "default-case"  is the case will be executed if none of the above cases matches the condition.

Ex. "Nested Switch"
void main() 
{ 
	int gfg1 = 1; 
	String gfg2 = "Geek"; 
	switch (gfg1) { 
	case 1: { 
		switch (gfg2) { 
		case 'Geek': { 
			print("Welcome to GeeksforGeeks"); 
		} 
		} 
	} break; 
	case 2: { 
		print("GeeksforGeeks number 2"); 
	} break; 
	default: { 
		print("This is default case"); 
	} break; 
	} 
} 

Note:   The values should not be repeated
	- The case statement should be only "Constant".  It should not be variable or expression. 


// Note the Differnce between these two Examples

enum AnimalType = {"Cat", "Dog", "Bunny"};
void test() {
  switch(AnimalType) {
    case AnimalType.Cat:
      print("Cat");
      return;
    case AnimalType.Dog:
      print("Dog");
      return;
    case AnimalType.Bunny:
      print("Bunny");
      return;
  }
  print("Code is Finished!");    // imp: this line will not be Executed, cuz we used   "return NOT break"   ,   so the program will stop
}


enum AnimalType = {"Cat", "Dog", "Bunny"};
void test() {
  switch(AnimalType) {
    case AnimalType.Cat:
      print("Cat");
      break;
    case AnimalType.Dog:
      print("Dog");
      break;
    case AnimalType.Bunny:
      print("Bunny");
      break;
  }
  print("Code is Finished!");    // NOTE: we used here "break"   and this will just break and get out from "switch" but will execute the rest of the code
}
