Iterable: Object (List, Map, Set) Contains Data that can be iterated upon it.
// Every Iterable you can use with it (for in) as next Ex.

void main()
{
  var a1 = [1,2,3,4];
  for(item in a1) {
    print(item);
  }
}

/// Important ////
You can't assign the "Iterable" to List, as next Example,   
Because:
- List is an Iterable, but an Iterable is not necessarily a List.
- An Iterable only guarantees that you can iterate (loop) over it.
- A List has additional methods like add(), remove(), insert(), etc.

void main() {
  Iterable<int> a = [1, 2, 3, 4];
  List b = a;  /// Error, you can't Assign Iterable to List
  print(b);
}

// How to fix it:   convert the Iterable to List
void main() {
  Iterable<int> a = [1, 2, 3, 4]; 
  List<int> b = a.toList(); // ✅ Convert Iterable<int> to List<int>,  OR  you can declare "a" as a List from the Beginning
  print(b); // Output: [1, 2, 3, 4]
}

///  Seperate Operator  ///  =>>  ...     OR   ...?   to make sure the value is not Empty, to not get run-time error

Ex.
void main()
{
  var list1 = [1,2,3,4];
  var list2 = [1, ... list1,  ... [7,8,9] ];  ///  ...  =>> refers to Sperate Operator, means Extract the Values of List "list1" , also the values of list [7,8,9]
// Output: [1,  1,2,3,4  , 7,8,9]

// Note: the Difference:
  var list3 = [[123]];    Output: [1,2,3]      // it will be appeared as a List, without Extract its Values     [2 Dimension List]
  var list4 = [... [1,2,3]]; Output: 1,2,3    //                      as Values

var list5 = [ list1];        // also will be shown as a List          =>> output:  [1,2,3,4]
var list6 = [... list1];    // it will Extract the values from List1  =>> output: 1,2,3,4

  // Also you can add a Condition to Extract or print List
var list7 = [  if(list1.lemgth == 4) ... list1];    // if length of list1 == 4, then Extract the values from list1,  and if NOT match the condition =>> it will print it as A List NOT values "will not extract the values"

  // But there is a problem:
  // if the list was "null", and you tried to Extraxt the Values from it, you Will get an Error
  // to fix this issue use =>>  ?

  var list8 = null;
  var list9 =  [ ... list8];    // You will get an Error, cuz list8 is Empty
  var list10 = [ ...? list8 ];  // Note the "  ?  " , so now you will not get an Error
}



///  .map() Function   NOT   map(key-value structure) ////
The .map() function is like a factory. It takes each item from a list, does some processing on it, and creates a new version of the item.  it's like     "in each"

// IMPORTANT:  Think of .map() as a promise to do work only when asked. It does not do the work immediately!

// Return Type: Iterable (needs .toList() for a List)

// Example of `.map()`
var newNumbers = numbers.map((num) {
  return num * 2;
});
print(newNumbers);
// Output:  (2, 4, 6)      =>>> NOTE: this Iterable NOT List



////  Very IMPORTANT Examples  ////
/// Differencce between these 2 Examples  is just   " print(b); "  in the Ex2
Ex1:
void main() {
  var a1 = [1, 2.5, 3.2, 4, 5, 6];
  var sum = 0.0;
  var b = a1.map((e) {
    sum += e;
    return e;
  });
  print(sum);          ////   output:  0.0    =>>> Dart is Smart and saya: hey, you never actually used "b", so I won’t waste time doing the .map() operation!"
}

void main() {
  var a1 = [1, 2.5, 3.2, 4, 5, 6];
  var sum = 0.0;
  var b = a1.map((e) {
    sum += e;
    return e;
  });
  print(b);
  print(sum);        ///  output: 27.5
}
Now we print b, so Dart has to compute b.
This forces .map() to execute.
Now sum is updated correctly.

// How to Fix it:
1- is to call or use the variable where u define it .map() as previous Ex.  "b"  , and we print(b);  to Execute the .map() operation
2- OR to convert the .map() to List ,    cuz  its by default return Iterble type NOT List

// so if U need to use .map() function, u need to convert it to List to Execute it Emmediately or to use the varaible where u define the .map()
void main() {
  var a1 = [1, 2.5, 3.2, 4, 5, 6];
  var sum = 0.0;
  var b = a1.map((e) {
    sum += e;
    return e;
  }).toList();      // Covert "b" from Iterable to List
  // Empty, not print(b)
  print(sum);        ///  output: 27.5    // Note: we didn't call "b" here
}
