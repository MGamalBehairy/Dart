///    Anonymous Function  //// also its called "Lambda or Closure"

- Its like normal function but "without name", also it can be with name
- Its used when u want quick, one-time function , especially for passing as an argument to higher-order functions (like forEach, map)
- Its used to minimize the Code
- I think the AnonoymousFunction: is the function that don't have name, but lambda Function is the function with name but minimize the code
* Syntax *
(parameter){
  // function body
};
// OR
lambada1 (x, y) => x+y;    // " => " means "return"

Ex.
void main(){
  // anonymous function assigned to variable
  var greet = (String name){
    return "Hello $name";
  }
  // Calling the Anonymous Function
  print(greet("Mohamed"));
}

///    Real-case Scenario  ///
void  main()
{
  List<String> names = ["Mohamed", "Ahmed", "Ali"];

  // using an Anonymous Function in forEach
  names.forEach((signleName){
    print("Hello $singleName!");
    });
}

Ex2.    // double the numbers using anonymous function in Map
void main()
{
  List<int>  numbers = [1, 2, 3, 4];

  // using Anonymous function in "Map"
  List<int> doubled = numbers.ma((number){
    return number * 2;
  }).toList();
  print(doubled);
}

Ex3. // Sort A List of String by their Length
void main()
{
  List<String> fruits = ["Banana", "Apple", "Kiwi"];

  // usign anonymous function to sort by length
  fruits.sort((a ,b) => a.length.compareTo(b.length));

  print(fruits);
}

// Normal Function1
fun1(x, y) {
  return x+y;
}
// using lambda
fun1 (x, y) => x+y;

// Normal Funxtion2
fun2(x, y) {
  print(x+y);  
}

// Lambda Function
fun2 (x, y) => print(x+y);

// Normal Function
main () 
{
  var x = [3, 4, 5, 5, 7];
  x.forEach( (){      // forEach(  () {}  );
    print(i);
  } );
}

// lambda
main()
{
  var x= [3 ,4 ,5, 6, 7];
  x.forEach( (i) => print(i);  );    // forEach( () => );
}

// Note: You can store the Lambda function in Variable, but it should be Anonoymous "cuz you can't have 2 names for the same thing"
like this Ex. earlier
fun2 (x, y) => print(x+y);
// store the lambdafunction in a variable
var v1= fun2 (x, y) => print(x+y);  // you will get an error, you must delete the name of lambda function first
var v1 = (x, y) => print(x+y);
